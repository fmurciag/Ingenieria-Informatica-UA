#lang racket
(require rackunit)
;; EJERCICIO 1
;;A
(define (concat-iter lista-cadenas res)
  (if (null? lista-cadenas)
      res
      (concat-iter (cdr lista-cadenas) (string-append res (car lista-cadenas)))))

(define (concat lista-cadenas)
  (concat-iter lista-cadenas ""))


(check-equal? (concat '("hola" "y" "adiÃ³s")) "holayadiÃ³s")

;;B
(define (construyePareja n pareja)
  (cons (min n (car pareja)) (max n (cdr pareja))))

(define (min-max-iter lista res)
  (if (null? lista)
      res
      (min-max-iter (cdr lista) (construyePareja (car lista) res))))


(define (min-max lista)
  (min-max-iter (cdr lista) (cons (car lista) (car lista))))

(check-equal? (min-max '(2 5 9 12 5 0 4)) '(0 . 12))


;;EJERCICIO 2

(define (expande-pareja-iter pareja res)
  (if (= 0 (cdr pareja))
      res
      (expande-pareja-iter (cons (car pareja) (- (cdr pareja) 1)) (cons (car pareja) res))))

(define (expande-pareja pareja)
  (expande-pareja-iter pareja '()))

(check-equal? (expande-pareja (cons 'a 4)) '(a a a a))

(define (expande-parejas-iter pareja res)
  (if (= 0 (cdr pareja))
      res
      (expande-pareja-iter (cons (car pareja) (- (cdr pareja) 1)) (cons (car pareja) res))))

(define (expande-parejas . pareja)
  (expande-parejas-iter pareja '()))

(check-equal? (expande-pareja (cons 'a 4)) '(a a a a))


