

alter table campeonato add finaciacion number(5);


1.- create or replace function hay_deportistas (pPrueba prueba.codigo%type, pCat DEPORTISTA.CATEGORIA%type) return varchar2 is

wrespuesta varchar2(50); 
wexiste   varchar2(1);
wcuantos number;

begin

  begin
      select 'S' into wexiste from prueba where codigo = pPrueba;
      select count(*)
      into  wcuantos
      from  participar p, deportista d
      where P.DEPORTISTA = D.NIF and P.PRUEBA=pPrueba and  D.CATEGORIA = pCat;
      if wcuantos = 0 then
           wrespuesta :='No';
      else
          wRespuesta := 'Si';
      end if;
     exception
     when no_data_found then
       wrespuesta := 'No existe la prueba';
  end;
   
 return wrespuesta;

end; 



2.- 
UNA POSIBILIDAD

CREATE OR REPLACE FUNCTION EDADREV (entfecha date, Y number) return varchar IS
cont number(3):=0;
edad number(2);
mayor exception;
cursor c1 is select codigo,fecha,nif, fechanac from prueba,participar, deportista
 where nif=deportista and prueba=codigo and fecha=entfecha;

begin
   select 1 into cont from prueba where fecha=entfecha;

   for reg in c1 loop
       edad:=to_char(reg.fecha,'yyyy')-to_char(reg.fechanac,'yyyy');

       if edad>75 then raise mayor; end if;

       if edad<Y then cont:=cont+1; end if;

   end loop;

   if cont=0 then return('OK');
   elsif cont<5 then return ('HAY');
   else return ('DEMASIADOS');
   end if;

   EXCEPTION

       WHEN no_data_found THEN 
             escribir('No hay pruebas para esa fecha dada como entrada');
             return(null);

       WHEN mayor THEN return('A REVISAR'); 

END;


2.- OTRA POSIBILIDAD


CREATE OR REPLACE FUNCTION comprueba_edad (p_fecha date, Y number) return varchar
IS
aux number(3):=0;
mayor exception;
no_prueba exception;

BEGIN
   select count(*) into aux from prueba where fecha=p_fecha;
   if aux=0 then raise no_prueba; end if;
   
   select count(*) into aux from participar, deportista
   where nif=deportista and to_char(p_fecha,'yyyy')-to_char(fechanac,'yyyy')>=75
   and prueba in (select codigo from prueba where fecha=p_fecha);
   if aux>0 then raise mayor; end if;
   
   select count(*) into aux from participar, deportista
   where nif=deportista and to_char(p_fecha,'yyyy')-to_char(fechanac,'yyyy')<Y
   and prueba in (select codigo from prueba where fecha=p_fecha);
   if aux=0 then return('OK');
   elsif aux<5 then return ('HAY');
   else return ('DEMASIADOS');
   end if;

   EXCEPTION
       WHEN no_prueba THEN 
             escribir('No hay pruebas para esa fecha dada como entrada');
             return(null);

       WHEN mayor THEN return('A REVISAR'); 
END;



3.- create or replace procedure reparto(p_campeonato campeonato.codigo%type)
is
total number(4);
asignar number(5,2);
no_reparto exception;
no_pruebas exception;
aux_financiacion campeonato.financiacion%type;
begin
select financiacion into aux_financiacion from campeonato where codigo=p_campeonato;
select count(*) into total from prueba where campeonato=p_campeonato;
if total=0 then raise no_pruebas;end if;
if aux_financiacion-total*100 <=0 then raise no_reparto; end if;
update prueba set presupuesto=aux_financiacion/total where campeonato=p_campeonato;
update campeonato set financiacion=financiacion-100*total where codigo=p_campeonato;
exception
when no_data_found then
 escribir('No existe el campeonato');
 when no_pruebas then
 escribir('Sin pruebas');
when no_reparto then null;
end;



4.- create or replace procedure ganadores_por_prueba
is
cursor  las_pruebas is 
select prueba.codigo codpru, campeonato.codigo codcamp, nombre nomcamp, count(deportista) participantes
from prueba join campeonato on(campeonato.codigo=campeonato) left join participar on (prueba.codigo=prueba)
group by prueba.codigo, campeonato.codigo, nombre;

aux_prueba prueba.codigo%type;
cont number(1):=0;
aux_puntos participar.puntos%type:=0;

cursor los_ganadores is
select deportista, nombre, puntos 
from participar, deportista where nif=deportista  and prueba=aux_prueba 
order by puntos desc 
fetch next 5 rows only; -- sirve para recuperar sólo las 5 primeras filas. Podíamos haber mostrado los 5 primeros apoyándonos en cont

mal exception;

BEGIN
for p in las_pruebas loop
  aux_prueba:=p.codpru;
  escribir('Ganadores de la prueba '||p.codpru||'  del campeonato '||p.codcamp||' - '||p.nomcamp);
  IF p.participantes<5 THEN escribir('Prueba desierta o no representaiva'); 
  ELSE
    for g in los_ganadores loop
    cont:=cont+1;
    
    if g.puntos=aux_puntos then raise mal; end if;
    
    escribir(cont||'. '||g.nombre||'  '||g.puntos);
    aux_puntos:=g.puntos;
  end loop; 
  end if;
end loop;
    
EXCEPTION
WHEN mal THEN
INSERT INTO INCONSISTENCIA VALUES(aux_prueba, aux_puntos);
raise_application_error(-20601,'Se cometió un fallo al almacenar la información de la prueba '||aux_prueba);
END;    




5.- EJERCICIO 5

alter table deportista  add constraint ch_categoria check (categoria 
in('SUB12','SUB16','SUB18','ABSOLUTA'));

create or replace trigger paso_categorias
before update of categoria on deportista
for each row when  (((new.categoria='SUB16' and old.categoria<>'SUB12') 
                 or (new.categoria='SUB18' and old.categoria<>'SUB16') 
                 or (new.categoria='ABSOLUTA' and old.categoria<>'SUB18')) 
                 and (old.categoria <> new.categoria))
BEGIN
   raise_application_error(-20601,'La categoría '||:new.categoria||'  no se 
puede alcanzar desde '||:old.categoria);
END;


6.- create or replace trigger reparto_presupuesto
before insert on prueba
-- el enunciado pide sólo insert
for each row
declare auxf campeonato.financiacion%type;
begin
select financiacion into auxf from campeonato where codigo=:new.campeonato;
IF auxf IS NULL THEN raise_application_error(-20601,'No sabemos si hay suficiente financiación'); END IF;
if auxf < :new.presupuesto then
raise_application_error(-20601,'No hay suficiente financiación para asignar presupuesto la prueba '||:new.codigo);
else
update campeonato
set financiacion=financiacion-:new.presupuesto
where codigo=:new.campeonato;
end if;
end;
